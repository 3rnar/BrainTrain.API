// <auto-generated />
using System;
using BrainTrain.Core.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BrainTrain.Core.Migrations
{
    [DbContext(typeof(BrainTrainContext))]
    [Migration("20210617124451_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "6.0.0-preview.5.21301.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BrainTrain.Core.Models.AnswerSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AnswerSources");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DesiredResult")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GradeId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsMale")
                        .HasColumnType("bit");

                    b.Property<string>("KaznituPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastVisitDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LevelId")
                        .HasColumnType("int");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.Property<string>("RegionStr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("int");

                    b.Property<string>("SchoolStr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("SecondsOnTheSite")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradeId");

                    b.HasIndex("LevelId");

                    b.HasIndex("RegionId");

                    b.HasIndex("SchoolId");

                    b.ToTable("ApplicationUser");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.BattleQueue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BattleResultStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SecondUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<string>("WinnerId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BattleResultStatusId");

                    b.HasIndex("FirstUserId");

                    b.HasIndex("SecondUserId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("WinnerId");

                    b.ToTable("BattleQueues");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.BattleQueuesToQuestions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BattleQueueId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BattleQueueId");

                    b.HasIndex("QuestionId");

                    b.ToTable("BattleQueuesToQuestions");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.BattleQueuesToThemes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BattleQueueId")
                        .HasColumnType("int");

                    b.Property<int>("ThemeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BattleQueueId");

                    b.HasIndex("ThemeId");

                    b.ToTable("BattleQueuesToThemes");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.BattleResultStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BattleResultStatus");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NewsId")
                        .HasColumnType("int");

                    b.Property<int?>("ReplyingCommentId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("NewsId");

                    b.HasIndex("ReplyingCommentId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.ComplaintType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ComplaintTypes");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.Constant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateValue")
                        .HasColumnType("datetime2");

                    b.Property<double?>("NumericValue")
                        .HasColumnType("float");

                    b.Property<string>("TextValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Constants");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.ControlWork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TypeId");

                    b.HasIndex("UserId");

                    b.ToTable("ControlWorks");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.ControlWorkType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ControlWorkTypes");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.ControlWorksToModules", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ControlWorkId")
                        .HasColumnType("int");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ControlWorkId");

                    b.HasIndex("ModuleId");

                    b.ToTable("ControlWorksToModules");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.EntVariant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EntYearId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EntYearId");

                    b.HasIndex("SubjectId");

                    b.ToTable("EntVariants");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.EntVariantsToQuestions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EntVariantId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EntVariantId");

                    b.HasIndex("QuestionId");

                    b.ToTable("EntVariantsToQuestions");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.EntYear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EntYears");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.EntrantTestQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SubjectId");

                    b.ToTable("EntrantTestQuestions");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.EntrantTestQuestionsToThemes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EntrantTestQuestionId")
                        .HasColumnType("int");

                    b.Property<int>("ThemeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EntrantTestQuestionId");

                    b.HasIndex("ThemeId");

                    b.ToTable("EntrantTestQuestionsToThemes");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateSent")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EntityId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsSeen")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSent")
                        .HasColumnType("bit");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.EventType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EventTypes");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("PreText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.FilesToMaterials", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FileId")
                        .HasColumnType("int");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<string>("PreText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("MaterialId");

                    b.ToTable("FilesToMaterials");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.Goal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Goals");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.KaznituUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IIN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("MyProperty")
                        .HasColumnType("datetime2");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("KaznituUsers");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.Keyword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("KeyWords");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.KeywordsToMaterials", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("KeywordId")
                        .HasColumnType("int");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KeywordId");

                    b.HasIndex("MaterialId");

                    b.ToTable("KeywordsToMaterials");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.LRNQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsPrecalculus")
                        .HasColumnType("bit");

                    b.Property<string>("JsonData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LRNQuestions");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.LearningPlace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LearningPlaces");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.Level", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("FromRating")
                        .HasColumnType("float");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ToRating")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Levels");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentManagerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MaterialAuthorId")
                        .HasColumnType("int");

                    b.Property<int>("MaterialTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContentManagerId");

                    b.HasIndex("MaterialAuthorId");

                    b.HasIndex("MaterialTypeId");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.MaterialAuthor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MaterialAuthors");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.MaterialLearningStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MaterialLearningStatuses");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.MaterialType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MaterialTypes");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.MaterialsToThemes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<int>("ThemeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.HasIndex("ThemeId");

                    b.ToTable("MaterialsToThemes");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.Midterm_Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateHold")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Midterm_Events");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.Midterm_Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Midterm_Languages");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.Midterm_Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("LrnJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int>("VariantId")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("VariantId");

                    b.ToTable("Midterm_Questions");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.Midterm_QuestionStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Midterm_QuestionStatuses");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.Midterm_Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Midterm_Subjects");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.Midterm_Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Midterm_Teachers");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.Midterm_User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("SystemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Midterm_Users");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.Midterm_UserComplaint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IIN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Midterm_UserComplaints");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.Midterm_UserEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateFinish")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<double?>("FinalResult")
                        .HasColumnType("float");

                    b.Property<bool?>("IsPrinted")
                        .HasColumnType("bit");

                    b.Property<double?>("SecondsSpent")
                        .HasColumnType("float");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Midterm_UserEvents");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.Midterm_UserEventQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("UserEventId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserEventId");

                    b.ToTable("Midterm_UserEventQuestions");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.Midterm_UserStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Midterm_UserStatuses");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.Midterm_Variant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Midterm_Variants");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DaysToLearn")
                        .HasColumnType("int");

                    b.Property<int?>("ModuleTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ModuleTypeId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.ModuleThemePassAttempt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("CurrentScore")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsFinished")
                        .HasColumnType("bit");

                    b.Property<int>("ThemeId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ThemeId");

                    b.HasIndex("UserId");

                    b.ToTable("ModuleThemePassAttempts");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.ModuleThemePassAttemptsToQuestions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttepmtId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttepmtId");

                    b.HasIndex("QuestionId");

                    b.ToTable("ModuleThemePassAttemptsToQuestions");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.ModuleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ModuleTypes");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentManagerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContentManagerId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.OpenQuestionsToMaterialParts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FileId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int?>("TextId")
                        .HasColumnType("int");

                    b.Property<int?>("VideoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("TextId");

                    b.HasIndex("VideoId");

                    b.ToTable("OpenQuestionsToMaterialParts");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentManagerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CorrectAnswerValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsChecked")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsEnt")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsModuleQuestion")
                        .HasColumnType("bit");

                    b.Property<string>("JsonData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionDifficultyId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContentManagerId");

                    b.HasIndex("QuestionDifficultyId");

                    b.HasIndex("QuestionTypeId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.QuestionAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnswerSourceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsViewed")
                        .HasColumnType("bit");

                    b.Property<int?>("ModuleThemePassAttemptId")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfAttempts")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int?>("SolvingSeconds")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AnswerSourceId");

                    b.HasIndex("ModuleThemePassAttemptId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionAnswers");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.QuestionAnswerLrnVariant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("QuestionAnswerId")
                        .HasColumnType("int");

                    b.Property<int>("VariantValue")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionAnswerId");

                    b.ToTable("QuestionAnswerLrnVariants");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.QuestionAnswerVariant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("QuestionAnswerId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionVariantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionAnswerId");

                    b.HasIndex("QuestionVariantId");

                    b.ToTable("QuestionAnswerVariants");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.QuestionCompaint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ComplaintTypeId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ComplaintTypeId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionCompaints");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.QuestionDifficulty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("QuestionDifficulties");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.QuestionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("QuestionTypes");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.QuestionVariant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionVariants");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.QuestionsToGoals", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GoalId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GoalId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionsToGoals");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.QuestionsToMaterials", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionsToMaterials");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.QuestionsToSubjects", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SubjectId");

                    b.ToTable("QuestionsToSubjects");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.QuestionsToThemes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("ThemeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("ThemeId");

                    b.ToTable("QuestionsToThemes");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.QuestionsToTrainings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("TrainingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("TrainingId");

                    b.ToTable("QuestionsToTrainings");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.RequestLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RequestBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestHeaders")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Response")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RequestLogs");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Schools");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.Solution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentManagerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContentManagerId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Solutions");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.SourceUsefullness", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsLike")
                        .HasColumnType("bit");

                    b.Property<int?>("MaterialId")
                        .HasColumnType("int");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("SourceUsefullnesses");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MaximumScore")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.SubjectsToGoals", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GoalId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GoalId");

                    b.HasIndex("SubjectId");

                    b.ToTable("SubjectsToGoals");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.Text", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Texts");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.TextsToMaterials", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<string>("PreText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TextId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.HasIndex("TextId");

                    b.ToTable("TextsToMaterials");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DaysToLearn")
                        .HasColumnType("int");

                    b.Property<int?>("GradeId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("ParentThemeId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GradeId");

                    b.HasIndex("ParentThemeId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Themes");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.ThemesToModules", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("IsDominant")
                        .HasColumnType("bit");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<int>("ThemeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("ThemeId");

                    b.ToTable("ThemesToModules");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.ThemesTrees", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FirstThemeId")
                        .HasColumnType("int");

                    b.Property<int>("SecondThemeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FirstThemeId");

                    b.HasIndex("SecondThemeId");

                    b.ToTable("ThemesTrees");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.Training", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TrainingTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrainingTypeId");

                    b.ToTable("Training");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.TrainingStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TrainingStatus");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.TrainingType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TrainingTypes");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.UploadFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BlobUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UploadFiles");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.UserCoins", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserCoins");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.UserRatings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserRatings");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.UsersToControlWorks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ControlWorkId")
                        .HasColumnType("int");

                    b.Property<double>("CurrentLearningRate")
                        .HasColumnType("float");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ControlWorkId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersToControlWorks");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.UsersToControlWorksToQuestions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsAnswered")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("UsersToControlWorksId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UsersToControlWorksId");

                    b.ToTable("UsersToControlWorksToQuestions");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.UsersToEntVariants", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("CurrentLearningRate")
                        .HasColumnType("float");

                    b.Property<int>("EntVariantId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("NumberOfCorrectAnswers")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("EntVariantId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersToEntVariants");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.UsersToGoals", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("GoalId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GoalId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersToGoals");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.UsersToLearningPlaces", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("LearningPlaceId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("LearningPlaceId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersToLearningPlaces");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.UsersToMaterials", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<int>("MaterialLearningStatusId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.HasIndex("MaterialLearningStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersToMaterials");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.UsersToModules", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("CurrentLearningRate")
                        .HasColumnType("float");

                    b.Property<DateTime?>("FactLearnedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PredictedDeadLine")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersToModules");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.UsersToSubjects", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("CurrentLearningRate")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DesiredScore")
                        .HasColumnType("int");

                    b.Property<bool>("IsEntrantTestPassed")
                        .HasColumnType("bit");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersToSubjects");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.UsersToThemes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("CurrentLearningRate")
                        .HasColumnType("float");

                    b.Property<double?>("CurrentOvarallLearningRate")
                        .HasColumnType("float");

                    b.Property<bool?>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsThemeLearned")
                        .HasColumnType("bit");

                    b.Property<int?>("ModuleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PredictedDeadLine")
                        .HasColumnType("datetime2");

                    b.Property<double?>("PredictedSubjectLearningRate")
                        .HasColumnType("float");

                    b.Property<int>("ThemeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ThemeLearnedFactSubjectLearningDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("ThemeLearnedFactSubjectLearningRate")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("ThemeId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersToThemes");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.UsersToTrainings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("TrainingId")
                        .HasColumnType("int");

                    b.Property<int>("TrainingStatusId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TrainingId");

                    b.HasIndex("TrainingStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersToTrainings");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.Video", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("PreText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.VideosToMaterials", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<string>("PreText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VideoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.HasIndex("VideoId");

                    b.ToTable("VideosToMaterials");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.ApplicationUser", b =>
                {
                    b.HasOne("BrainTrain.Core.Models.Grade", "Grade")
                        .WithMany()
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BrainTrain.Core.Models.Level", "Level")
                        .WithMany()
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BrainTrain.Core.Models.Region", "Region")
                        .WithMany("Users")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BrainTrain.Core.Models.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Grade");

                    b.Navigation("Level");

                    b.Navigation("Region");

                    b.Navigation("School");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.BattleQueue", b =>
                {
                    b.HasOne("BrainTrain.Core.Models.BattleResultStatus", "BattleResultStatus")
                        .WithMany()
                        .HasForeignKey("BattleResultStatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BrainTrain.Core.Models.ApplicationUser", "FirstUser")
                        .WithMany()
                        .HasForeignKey("FirstUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrainTrain.Core.Models.ApplicationUser", "SecondUser")
                        .WithMany()
                        .HasForeignKey("SecondUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BrainTrain.Core.Models.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrainTrain.Core.Models.ApplicationUser", "Winner")
                        .WithMany()
                        .HasForeignKey("WinnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("BattleResultStatus");

                    b.Navigation("FirstUser");

                    b.Navigation("SecondUser");

                    b.Navigation("Subject");

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.BattleQueuesToQuestions", b =>
                {
                    b.HasOne("BrainTrain.Core.Models.BattleQueue", "BattleQueue")
                        .WithMany("BattleQueuesToQuestions")
                        .HasForeignKey("BattleQueueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrainTrain.Core.Models.Question", "Question")
                        .WithMany("BattleQueuesToQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BattleQueue");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.BattleQueuesToThemes", b =>
                {
                    b.HasOne("BrainTrain.Core.Models.BattleQueue", "BattleQueue")
                        .WithMany("BattleQueuesToThemes")
                        .HasForeignKey("BattleQueueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrainTrain.Core.Models.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BattleQueue");

                    b.Navigation("Theme");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.Comment", b =>
                {
                    b.HasOne("BrainTrain.Core.Models.News", "News")
                        .WithMany("Comments")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BrainTrain.Core.Models.Comment", "ReplyingComment")
                        .WithMany()
                        .HasForeignKey("ReplyingCommentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BrainTrain.Core.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("News");

                    b.Navigation("ReplyingComment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.ControlWork", b =>
                {
                    b.HasOne("BrainTrain.Core.Models.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrainTrain.Core.Models.ControlWorkType", "ControlWorkType")
                        .WithMany("ControlWorks")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrainTrain.Core.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ControlWorkType");

                    b.Navigation("Subject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.ControlWorksToModules", b =>
                {
                    b.HasOne("BrainTrain.Core.Models.ControlWork", "ControlWork")
                        .WithMany("ControlWorksToModules")
                        .HasForeignKey("ControlWorkId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrainTrain.Core.Models.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ControlWork");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.EntVariant", b =>
                {
                    b.HasOne("BrainTrain.Core.Models.EntYear", "EntYear")
                        .WithMany("EntVariants")
                        .HasForeignKey("EntYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrainTrain.Core.Models.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EntYear");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.EntVariantsToQuestions", b =>
                {
                    b.HasOne("BrainTrain.Core.Models.EntVariant", "EntVariant")
                        .WithMany("EntVariantsToQuestions")
                        .HasForeignKey("EntVariantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrainTrain.Core.Models.Question", "Question")
                        .WithMany("EntVariantsToQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EntVariant");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.EntrantTestQuestion", b =>
                {
                    b.HasOne("BrainTrain.Core.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrainTrain.Core.Models.Subject", "Subject")
                        .WithMany("EntrantQuestions")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.EntrantTestQuestionsToThemes", b =>
                {
                    b.HasOne("BrainTrain.Core.Models.EntrantTestQuestion", "EntrantTestQuestion")
                        .WithMany("EntrantTestQuestionsToThemes")
                        .HasForeignKey("EntrantTestQuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrainTrain.Core.Models.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EntrantTestQuestion");

                    b.Navigation("Theme");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.Event", b =>
                {
                    b.HasOne("BrainTrain.Core.Models.EventType", "EventType")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrainTrain.Core.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EventType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.FilesToMaterials", b =>
                {
                    b.HasOne("BrainTrain.Core.Models.File", "File")
                        .WithMany("FilesToMaterials")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrainTrain.Core.Models.Material", "Material")
                        .WithMany("FilesToMaterials")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("Material");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.KeywordsToMaterials", b =>
                {
                    b.HasOne("BrainTrain.Core.Models.Keyword", "Keyword")
                        .WithMany("KeyWordsToMaterials")
                        .HasForeignKey("KeywordId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrainTrain.Core.Models.Material", "Material")
                        .WithMany("KeywordsToMaterials")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Keyword");

                    b.Navigation("Material");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.Material", b =>
                {
                    b.HasOne("BrainTrain.Core.Models.ApplicationUser", "ContentManager")
                        .WithMany()
                        .HasForeignKey("ContentManagerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrainTrain.Core.Models.MaterialAuthor", "MaterialAuthor")
                        .WithMany("Materials")
                        .HasForeignKey("MaterialAuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrainTrain.Core.Models.MaterialType", "MaterialType")
                        .WithMany("Materials")
                        .HasForeignKey("MaterialTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ContentManager");

                    b.Navigation("MaterialAuthor");

                    b.Navigation("MaterialType");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.MaterialsToThemes", b =>
                {
                    b.HasOne("BrainTrain.Core.Models.Material", "Material")
                        .WithMany("MaterialsToThemes")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrainTrain.Core.Models.Theme", "Theme")
                        .WithMany("MaterialsToThemes")
                        .HasForeignKey("ThemeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("Theme");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.Midterm_Question", b =>
                {
                    b.HasOne("BrainTrain.Core.Models.Midterm_Language", "Midterm_Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BrainTrain.Core.Models.Midterm_Subject", "Midterm_Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BrainTrain.Core.Models.Midterm_Variant", "Midterm_Variant")
                        .WithMany("Midterm_Questions")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Midterm_Language");

                    b.Navigation("Midterm_Subject");

                    b.Navigation("Midterm_Variant");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.Midterm_User", b =>
                {
                    b.HasOne("BrainTrain.Core.Models.Midterm_Language", "Midterm_Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrainTrain.Core.Models.Midterm_Teacher", "Midterm_Teacher")
                        .WithMany("Midterm_Users")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Midterm_Language");

                    b.Navigation("Midterm_Teacher");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.Midterm_UserEvent", b =>
                {
                    b.HasOne("BrainTrain.Core.Models.Midterm_Event", "Midterm_Event")
                        .WithMany("Midterm_UserEvents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrainTrain.Core.Models.Midterm_UserStatus", "Midterm_UserStatus")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BrainTrain.Core.Models.Midterm_User", "Midterm_User")
                        .WithMany("Midterm_UserEvents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Midterm_Event");

                    b.Navigation("Midterm_User");

                    b.Navigation("Midterm_UserStatus");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.Midterm_UserEventQuestion", b =>
                {
                    b.HasOne("BrainTrain.Core.Models.Midterm_Question", "Midterm_Question")
                        .WithMany("Midterm_UserEventQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrainTrain.Core.Models.Midterm_QuestionStatus", "Midterm_QuestionStatus")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BrainTrain.Core.Models.Midterm_UserEvent", "Midterm_UserEvent")
                        .WithMany("Midterm_UserEventQuestions")
                        .HasForeignKey("UserEventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Midterm_Question");

                    b.Navigation("Midterm_QuestionStatus");

                    b.Navigation("Midterm_UserEvent");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.Midterm_Variant", b =>
                {
                    b.HasOne("BrainTrain.Core.Models.Midterm_Event", "Midterm_Event")
                        .WithMany("Midterm_Variants")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrainTrain.Core.Models.Midterm_Subject", "Midterm_Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Midterm_Event");

                    b.Navigation("Midterm_Subject");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.Module", b =>
                {
                    b.HasOne("BrainTrain.Core.Models.ModuleType", "ModuleType")
                        .WithMany("Modules")
                        .HasForeignKey("ModuleTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BrainTrain.Core.Models.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ModuleType");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.ModuleThemePassAttempt", b =>
                {
                    b.HasOne("BrainTrain.Core.Models.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrainTrain.Core.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Theme");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.ModuleThemePassAttemptsToQuestions", b =>
                {
                    b.HasOne("BrainTrain.Core.Models.ModuleThemePassAttempt", "ModuleThemePassAttempt")
                        .WithMany("AttemptsToQuestions")
                        .HasForeignKey("AttepmtId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrainTrain.Core.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ModuleThemePassAttempt");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.News", b =>
                {
                    b.HasOne("BrainTrain.Core.Models.ApplicationUser", "ContentManager")
                        .WithMany()
                        .HasForeignKey("ContentManagerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ContentManager");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.OpenQuestionsToMaterialParts", b =>
                {
                    b.HasOne("BrainTrain.Core.Models.File", "File")
                        .WithMany("OpenQuestionsToMaterialParts")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BrainTrain.Core.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrainTrain.Core.Models.Text", "Text")
                        .WithMany("OpenQuestionsToMaterialParts")
                        .HasForeignKey("TextId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BrainTrain.Core.Models.Video", "Video")
                        .WithMany("OpenQuestionsToMaterialParts")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("File");

                    b.Navigation("Question");

                    b.Navigation("Text");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.Question", b =>
                {
                    b.HasOne("BrainTrain.Core.Models.ApplicationUser", "ContentManager")
                        .WithMany("Questions")
                        .HasForeignKey("ContentManagerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrainTrain.Core.Models.QuestionDifficulty", "QuestionDifficulty")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionDifficultyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrainTrain.Core.Models.QuestionType", "QuestionType")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ContentManager");

                    b.Navigation("QuestionDifficulty");

                    b.Navigation("QuestionType");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.QuestionAnswer", b =>
                {
                    b.HasOne("BrainTrain.Core.Models.AnswerSource", "AnswerSource")
                        .WithMany()
                        .HasForeignKey("AnswerSourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrainTrain.Core.Models.ModuleThemePassAttempt", "ModuleThemePassAttempt")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("ModuleThemePassAttemptId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BrainTrain.Core.Models.Question", "Question")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrainTrain.Core.Models.ApplicationUser", "User")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AnswerSource");

                    b.Navigation("ModuleThemePassAttempt");

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.QuestionAnswerLrnVariant", b =>
                {
                    b.HasOne("BrainTrain.Core.Models.QuestionAnswer", "QuestionAnswer")
                        .WithMany("QuestionAnswerLrnVariants")
                        .HasForeignKey("QuestionAnswerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("QuestionAnswer");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.QuestionAnswerVariant", b =>
                {
                    b.HasOne("BrainTrain.Core.Models.QuestionAnswer", "QuestionAnswer")
                        .WithMany("QuestionAnswerVariants")
                        .HasForeignKey("QuestionAnswerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrainTrain.Core.Models.QuestionVariant", "QuestionVariant")
                        .WithMany("QuestionAnswerVariants")
                        .HasForeignKey("QuestionVariantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("QuestionAnswer");

                    b.Navigation("QuestionVariant");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.QuestionCompaint", b =>
                {
                    b.HasOne("BrainTrain.Core.Models.ComplaintType", "ComplaintType")
                        .WithMany("QuestionCompaints")
                        .HasForeignKey("ComplaintTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrainTrain.Core.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrainTrain.Core.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ComplaintType");

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.QuestionVariant", b =>
                {
                    b.HasOne("BrainTrain.Core.Models.Question", "Question")
                        .WithMany("QuestionVariants")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.QuestionsToGoals", b =>
                {
                    b.HasOne("BrainTrain.Core.Models.Goal", "Goal")
                        .WithMany("QuestionsToGoals")
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrainTrain.Core.Models.Question", "Question")
                        .WithMany("QuestionsToGoals")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Goal");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.QuestionsToMaterials", b =>
                {
                    b.HasOne("BrainTrain.Core.Models.Material", "Material")
                        .WithMany("QuestionsToMaterials")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrainTrain.Core.Models.Question", "Question")
                        .WithMany("QuestionsToMaterials")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.QuestionsToSubjects", b =>
                {
                    b.HasOne("BrainTrain.Core.Models.Question", "Question")
                        .WithMany("QuestionsToSubjects")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrainTrain.Core.Models.Subject", "Subject")
                        .WithMany("QuestionsToSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.QuestionsToThemes", b =>
                {
                    b.HasOne("BrainTrain.Core.Models.Question", "Question")
                        .WithMany("QuestionsToThemes")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrainTrain.Core.Models.Theme", "Theme")
                        .WithMany("QuestionsToThemes")
                        .HasForeignKey("ThemeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Theme");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.QuestionsToTrainings", b =>
                {
                    b.HasOne("BrainTrain.Core.Models.Question", "Question")
                        .WithMany("QuestionsToTainings")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrainTrain.Core.Models.Training", "Training")
                        .WithMany("QuestionsToTrainings")
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Training");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.School", b =>
                {
                    b.HasOne("BrainTrain.Core.Models.Region", "Region")
                        .WithMany("Schools")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.Solution", b =>
                {
                    b.HasOne("BrainTrain.Core.Models.ApplicationUser", "ContentManager")
                        .WithMany()
                        .HasForeignKey("ContentManagerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrainTrain.Core.Models.Question", "Question")
                        .WithMany("Solutions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ContentManager");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.SourceUsefullness", b =>
                {
                    b.HasOne("BrainTrain.Core.Models.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BrainTrain.Core.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BrainTrain.Core.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.SubjectsToGoals", b =>
                {
                    b.HasOne("BrainTrain.Core.Models.Goal", "Goal")
                        .WithMany("SubjectsToGoals")
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrainTrain.Core.Models.Subject", "Subject")
                        .WithMany("SubjectsToGoals")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Goal");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.TextsToMaterials", b =>
                {
                    b.HasOne("BrainTrain.Core.Models.Material", "Material")
                        .WithMany("TextsToMaterials")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrainTrain.Core.Models.Text", "Text")
                        .WithMany("TextsToMaterials")
                        .HasForeignKey("TextId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("Text");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.Theme", b =>
                {
                    b.HasOne("BrainTrain.Core.Models.Grade", "Grade")
                        .WithMany("Themes")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BrainTrain.Core.Models.Theme", "ParentTheme")
                        .WithMany("ChildThemes")
                        .HasForeignKey("ParentThemeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BrainTrain.Core.Models.Subject", "Subject")
                        .WithMany("Themes")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Grade");

                    b.Navigation("ParentTheme");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.ThemesToModules", b =>
                {
                    b.HasOne("BrainTrain.Core.Models.Module", "Module")
                        .WithMany("ThemesToModules")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrainTrain.Core.Models.Theme", "Theme")
                        .WithMany("ThemesToModules")
                        .HasForeignKey("ThemeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("Theme");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.ThemesTrees", b =>
                {
                    b.HasOne("BrainTrain.Core.Models.Theme", "FirstTheme")
                        .WithMany()
                        .HasForeignKey("FirstThemeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrainTrain.Core.Models.Theme", "SecondTheme")
                        .WithMany()
                        .HasForeignKey("SecondThemeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FirstTheme");

                    b.Navigation("SecondTheme");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.Training", b =>
                {
                    b.HasOne("BrainTrain.Core.Models.TrainingType", "TrainingType")
                        .WithMany("Trainings")
                        .HasForeignKey("TrainingTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TrainingType");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.UserCoins", b =>
                {
                    b.HasOne("BrainTrain.Core.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.UserRatings", b =>
                {
                    b.HasOne("BrainTrain.Core.Models.ApplicationUser", "User")
                        .WithMany("UserRatings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.UsersToControlWorks", b =>
                {
                    b.HasOne("BrainTrain.Core.Models.ControlWork", "ControlWork")
                        .WithMany("UsersToControlWorks")
                        .HasForeignKey("ControlWorkId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrainTrain.Core.Models.ApplicationUser", "User")
                        .WithMany("UsersToControlWorks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ControlWork");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.UsersToControlWorksToQuestions", b =>
                {
                    b.HasOne("BrainTrain.Core.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrainTrain.Core.Models.UsersToControlWorks", "UsersToControlWorks")
                        .WithMany("UsersToControlWorksToQuestions")
                        .HasForeignKey("UsersToControlWorksId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("UsersToControlWorks");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.UsersToEntVariants", b =>
                {
                    b.HasOne("BrainTrain.Core.Models.EntVariant", "EntVariant")
                        .WithMany()
                        .HasForeignKey("EntVariantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrainTrain.Core.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("EntVariant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.UsersToGoals", b =>
                {
                    b.HasOne("BrainTrain.Core.Models.Goal", "Goal")
                        .WithMany("UsersToGoals")
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrainTrain.Core.Models.ApplicationUser", "User")
                        .WithMany("UsersToGoals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Goal");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.UsersToLearningPlaces", b =>
                {
                    b.HasOne("BrainTrain.Core.Models.LearningPlace", "LearningPlace")
                        .WithMany("UsersToLearningPlaces")
                        .HasForeignKey("LearningPlaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrainTrain.Core.Models.ApplicationUser", "User")
                        .WithMany("UsersToLearningPlaces")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("LearningPlace");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.UsersToMaterials", b =>
                {
                    b.HasOne("BrainTrain.Core.Models.Material", "Material")
                        .WithMany("UsersToMaterials")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrainTrain.Core.Models.MaterialLearningStatus", "MaterialLearningStatus")
                        .WithMany("UsersToMaterials")
                        .HasForeignKey("MaterialLearningStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrainTrain.Core.Models.ApplicationUser", "User")
                        .WithMany("UsersToMaterials")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Material");

                    b.Navigation("MaterialLearningStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.UsersToModules", b =>
                {
                    b.HasOne("BrainTrain.Core.Models.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrainTrain.Core.Models.ApplicationUser", "User")
                        .WithMany("UsersToModules")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Module");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.UsersToSubjects", b =>
                {
                    b.HasOne("BrainTrain.Core.Models.Subject", "Subject")
                        .WithMany("UsersToSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrainTrain.Core.Models.ApplicationUser", "User")
                        .WithMany("UsersToSubjects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Subject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.UsersToThemes", b =>
                {
                    b.HasOne("BrainTrain.Core.Models.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BrainTrain.Core.Models.Theme", "Theme")
                        .WithMany("UsersToThemes")
                        .HasForeignKey("ThemeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrainTrain.Core.Models.ApplicationUser", "User")
                        .WithMany("UsersToThemes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Module");

                    b.Navigation("Theme");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.UsersToTrainings", b =>
                {
                    b.HasOne("BrainTrain.Core.Models.Training", "Training")
                        .WithMany()
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrainTrain.Core.Models.TrainingStatus", "TrainingStatus")
                        .WithMany("UsersToTrainings")
                        .HasForeignKey("TrainingStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrainTrain.Core.Models.ApplicationUser", "User")
                        .WithMany("UsersToTrainings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Training");

                    b.Navigation("TrainingStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.VideosToMaterials", b =>
                {
                    b.HasOne("BrainTrain.Core.Models.Material", "Material")
                        .WithMany("VideosToMaterials")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrainTrain.Core.Models.Video", "Video")
                        .WithMany("VideosToMaterials")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.ApplicationUser", b =>
                {
                    b.Navigation("QuestionAnswers");

                    b.Navigation("Questions");

                    b.Navigation("UserRatings");

                    b.Navigation("UsersToControlWorks");

                    b.Navigation("UsersToGoals");

                    b.Navigation("UsersToLearningPlaces");

                    b.Navigation("UsersToMaterials");

                    b.Navigation("UsersToModules");

                    b.Navigation("UsersToSubjects");

                    b.Navigation("UsersToThemes");

                    b.Navigation("UsersToTrainings");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.BattleQueue", b =>
                {
                    b.Navigation("BattleQueuesToQuestions");

                    b.Navigation("BattleQueuesToThemes");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.ComplaintType", b =>
                {
                    b.Navigation("QuestionCompaints");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.ControlWork", b =>
                {
                    b.Navigation("ControlWorksToModules");

                    b.Navigation("UsersToControlWorks");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.ControlWorkType", b =>
                {
                    b.Navigation("ControlWorks");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.EntVariant", b =>
                {
                    b.Navigation("EntVariantsToQuestions");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.EntYear", b =>
                {
                    b.Navigation("EntVariants");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.EntrantTestQuestion", b =>
                {
                    b.Navigation("EntrantTestQuestionsToThemes");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.File", b =>
                {
                    b.Navigation("FilesToMaterials");

                    b.Navigation("OpenQuestionsToMaterialParts");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.Goal", b =>
                {
                    b.Navigation("QuestionsToGoals");

                    b.Navigation("SubjectsToGoals");

                    b.Navigation("UsersToGoals");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.Grade", b =>
                {
                    b.Navigation("Themes");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.Keyword", b =>
                {
                    b.Navigation("KeyWordsToMaterials");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.LearningPlace", b =>
                {
                    b.Navigation("UsersToLearningPlaces");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.Material", b =>
                {
                    b.Navigation("FilesToMaterials");

                    b.Navigation("KeywordsToMaterials");

                    b.Navigation("MaterialsToThemes");

                    b.Navigation("QuestionsToMaterials");

                    b.Navigation("TextsToMaterials");

                    b.Navigation("UsersToMaterials");

                    b.Navigation("VideosToMaterials");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.MaterialAuthor", b =>
                {
                    b.Navigation("Materials");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.MaterialLearningStatus", b =>
                {
                    b.Navigation("UsersToMaterials");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.MaterialType", b =>
                {
                    b.Navigation("Materials");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.Midterm_Event", b =>
                {
                    b.Navigation("Midterm_UserEvents");

                    b.Navigation("Midterm_Variants");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.Midterm_Question", b =>
                {
                    b.Navigation("Midterm_UserEventQuestions");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.Midterm_Teacher", b =>
                {
                    b.Navigation("Midterm_Users");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.Midterm_User", b =>
                {
                    b.Navigation("Midterm_UserEvents");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.Midterm_UserEvent", b =>
                {
                    b.Navigation("Midterm_UserEventQuestions");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.Midterm_Variant", b =>
                {
                    b.Navigation("Midterm_Questions");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.Module", b =>
                {
                    b.Navigation("ThemesToModules");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.ModuleThemePassAttempt", b =>
                {
                    b.Navigation("AttemptsToQuestions");

                    b.Navigation("QuestionAnswers");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.ModuleType", b =>
                {
                    b.Navigation("Modules");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.News", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.Question", b =>
                {
                    b.Navigation("BattleQueuesToQuestions");

                    b.Navigation("EntVariantsToQuestions");

                    b.Navigation("QuestionAnswers");

                    b.Navigation("QuestionVariants");

                    b.Navigation("QuestionsToGoals");

                    b.Navigation("QuestionsToMaterials");

                    b.Navigation("QuestionsToSubjects");

                    b.Navigation("QuestionsToTainings");

                    b.Navigation("QuestionsToThemes");

                    b.Navigation("Solutions");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.QuestionAnswer", b =>
                {
                    b.Navigation("QuestionAnswerLrnVariants");

                    b.Navigation("QuestionAnswerVariants");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.QuestionDifficulty", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.QuestionType", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.QuestionVariant", b =>
                {
                    b.Navigation("QuestionAnswerVariants");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.Region", b =>
                {
                    b.Navigation("Schools");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.Subject", b =>
                {
                    b.Navigation("EntrantQuestions");

                    b.Navigation("QuestionsToSubjects");

                    b.Navigation("SubjectsToGoals");

                    b.Navigation("Themes");

                    b.Navigation("UsersToSubjects");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.Text", b =>
                {
                    b.Navigation("OpenQuestionsToMaterialParts");

                    b.Navigation("TextsToMaterials");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.Theme", b =>
                {
                    b.Navigation("ChildThemes");

                    b.Navigation("MaterialsToThemes");

                    b.Navigation("QuestionsToThemes");

                    b.Navigation("ThemesToModules");

                    b.Navigation("UsersToThemes");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.Training", b =>
                {
                    b.Navigation("QuestionsToTrainings");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.TrainingStatus", b =>
                {
                    b.Navigation("UsersToTrainings");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.TrainingType", b =>
                {
                    b.Navigation("Trainings");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.UsersToControlWorks", b =>
                {
                    b.Navigation("UsersToControlWorksToQuestions");
                });

            modelBuilder.Entity("BrainTrain.Core.Models.Video", b =>
                {
                    b.Navigation("OpenQuestionsToMaterialParts");

                    b.Navigation("VideosToMaterials");
                });
#pragma warning restore 612, 618
        }
    }
}
